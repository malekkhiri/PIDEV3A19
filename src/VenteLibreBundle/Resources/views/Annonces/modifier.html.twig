{% extends "::base.html.twig" %}
{% block content %}
    <h1 style="text-align: center;color: #cb1d1d">Ajout Annonce</h1>
    {{ form_start(a) }}

    <div class="form-group required">
        {{ form_label(a.titre, 'E mail', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.titre, {'attr':{'class':'form-control','placeholder':'Email address'}}) }}
        </div>
    </div>
  <div class="form-group required">
        {{ form_label(a.prix, 'Prix', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.prix, {'attr':{'class':'form-control','placeholder':'Prix'}}) }}
        </div>
    </div>

    <div class="form-group required">
        {{ form_label(a.description, 'description', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.description, {'attr':{'class':'form-control','placeholder':'description'}}) }}
        </div>
    </div>
<div class="form-group required line">
    {{ form_label(a.datepublication, 'Date publication', {'label_attr' :{'class': 'col-sm-2 control-label '}}) }}
    <div class="col-sm-10">
        {{ form_widget(a.datepublication, {'attr':{'class':'form-control form-control-2'}}) }}
    </div>
</div>
    <div class="form-group required">
        {{ form_label(a.telephoneVendeur, 'telephone Vendeur', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.telephoneVendeur, {'attr':{'class':'form-control','placeholder':'telephoneVendeur'}}) }}
        </div>
    </div>
    <div class="form-group required">
    <div class="col-sm-2 control-label">
    adresse 
    </div>
             <input id="pac-input" class="controls form-control" type="text"
        placeholder="Votre Adresse">

    <div id="map" style="height: 300px;width: 500px;margin-bottom: 30px;top: 15px;"></div>

    </div>
    <div class="form-group required">
        {{ form_label(a.ville, 'ville', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.ville, {'attr':{'class':'form-control','placeholder':'ville'}}) }}
        </div>
    </div>
    <div class="form-group required">
        {{ form_label(a.region, 'Region', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-10">
            {{ form_widget(a.region, {'attr':{'class':'form-control','placeholder':'Region'}}) }}
        </div>
    </div>
  
    <div class="form-group required">
        {{ form_label(a.imageFile, 'Image : ', {'label_attr' :{'class': 'col-sm-2 control-label'}}) }}
        <div class="col-sm-6">
            {{ form_widget(a.imageFile) }}
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-6">
            <input type="submit" class=" btn btn-primary col-lg-push-3" value="Modifier Annonce">
        </div>
    </div>
    <br><br>
    <br><br>

    <br><br>    <br><br>
    <br><br>

    <br><br>    <br><br>
    <br><br>

    <br><br>    <br><br>


    {{ form_end(a) }}
    <script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initMap() {
        var region = document.getElementById(region)
        
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13
        });
        var input = /** @type {!HTMLInputElement} */(
            document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
          map: map,
          anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function() {
            var placess =autocomplete.getPlace().address_components;
            console.log(placess);
            document.getElementById('ventelibrebundle_annonces_region').value = placess[0].long_name
            document.getElementById('ventelibrebundle_annonces_ville').value = placess[placess.length - 2].long_name
          infowindow.close();
          marker.setVisible(false);
          var place = autocomplete.getPlace();
          if (!place.geometry) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert("No details available for input: '" + place.name + "'");
            return;
          }

          // If the place has a geometry, then present it on a map.
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);  // Why 17? Because it looks good.
          }
          marker.setIcon(/** @type {google.maps.Icon} */({
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(35, 35)
          }));
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);

          var address = '';
          if (place.address_components) {
            address = [
              (place.address_components[0] && place.address_components[0].short_name || ''),
              (place.address_components[1] && place.address_components[1].short_name || ''),
              (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
          }

          infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
          infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            autocomplete.setTypes(types);
          });
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC_YUCRC6WNZToMQ83Vucb2RSTTXo8aiiI&libraries=places&callback=initMap"
        async defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/js/bootstrap-datepicker.min.js"></script>

<!--line-->    
<script>
  $( ".line" ).each(function(index, element) {
  var startDate = new Date();
  $(this).find(".form-control-2").addClass("to"+index);
$('.to'+index).datepicker('setStartDate', startDate);
});
</script>
{% endblock %}
